name: Validate Planning Issue

on:
  issues:
    types: [opened, labeled]

env:
  AUTHORIZED_USERS: '["andyatmiami"]'

permissions:
  issues: write

jobs:
  validate-issue:
    if: |
      (github.event.action == 'labeled' && github.event.label.name == 'planning') ||
      (github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'planning'))
    runs-on: ubuntu-latest
    steps:
      - name: Validate issue
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`Action triggered by: ${context.eventName} event with action: ${context.payload.action}`);
            if (context.payload.action === 'labeled') {
              console.log(`Label added: ${context.payload.label.name}`);
            } else if (context.payload.action === 'opened') {
              console.log(`Issue opened with labels: ${context.payload.issue.labels.map(l => l.name).join(', ')}`);
            }

            const AUTHORIZED_USERS = JSON.parse(process.env.AUTHORIZED_USERS);
            const actor = context.actor;
            const issueNumber = context.issue.number;
            const isNewIssue = context.eventName === 'issues' && context.payload.action === 'opened';

            // Helper function to remove planning label and handle failure
            async function handleValidationFailure(message, shouldClose = false) {
              // Remove the planning label
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                name: 'planning'
              });

              // Add a comment explaining why the label was removed
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `@${actor} ${message}`
              });

              // Close the issue if it's new and should be closed
              if (isNewIssue && shouldClose) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  state: 'closed'
                });
              }

              core.setFailed(message);
            }

            // Get current issue labels
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const currentLabels = issue.labels.map(label => label.name);
            const planningLabels = ['epic', 'feature', 'task', 'bug'];
            const presentPlanningLabels = currentLabels.filter(label => planningLabels.includes(label));

            // Check user authorization
            if (!AUTHORIZED_USERS.includes(actor)) {
              await handleValidationFailure(
                'You are not authorized to add planning labels. Only authorized users can add planning labels to issues.',
                true
              );
            }

            // Check planning label requirements
            if (presentPlanningLabels.length !== 1) {
              await handleValidationFailure(
                `The planning label requires exactly one of the following labels to be present: ${planningLabels.join(', ')}. Please add one of these labels before adding the planning label.`,
                true
              );
            }

            console.log(`User ${actor} is authorized to add planning labels`);
            console.log(`Issue has valid planning label combination: planning + ${presentPlanningLabels[0]}`);