name: Sub-Issue Slash Command Handler

on:
  issue_comment:
    types: [created]

permissions:
  issues: write

jobs:
  handle-sub-issue-command:
    if: github.event.issue.pull_request == null  # âœ… Only trigger on issues, not PRs
    runs-on: ubuntu-latest

    steps:
      - name: Handle sub-issue commands
        id: handle-commands
        uses: actions/github-script@v7
        with:
          script: |
            const parseIssueNumber = (input) => {
              if (!input) return null;

              // Handle plain number
              if (/^\d+$/.test(input)) {
                return input;
              }

              // Handle #number format
              const hashMatch = input.match(/^#(\d+)$/);
              if (hashMatch) {
                return hashMatch[1];
              }

              // Handle URL format
              const urlMatch = input.match(/\/issues\/(\d+)$/);
              if (urlMatch) {
                return urlMatch[1];
              }

              throw new Error(`Could not parse issue number from input: '${input}'`);
            };

            const getIssueNodeId = async (owner, repo, issueNumber) => {
              const response = await github.graphql(`
                query {
                  repository(owner: "${owner}", name: "${repo}") {
                    issue(number: ${issueNumber}) {
                      id
                    }
                  }
                }
              `);
              return response.repository.issue.id;
            };

            const performSubIssueMutation = async (action, parentIssueNodeId, childIssueNodeId) => {
              const mutationField = action === 'add' ? 'addSubIssue' : 'removeSubIssue';

              const mutation = `
                mutation {
                  ${mutationField}(input: {
                    issueId: "${parentIssueNodeId}",
                    subIssueId: "${childIssueNodeId}"
                  }) {
                    clientMutationId
                    issue {
                      id
                      title
                    }
                    subIssue {
                      id
                      title
                    }
                  }
                }
              `;

              try {
                const response = await github.graphql(mutation);
                return response;
              } catch (error) {
                throw new Error(error.message);
              }
            };

            const processSubIssueCommand = async (line, action, owner, repo, parentIssueNodeId) => {
              const commandPrefix = `/${action}-sub-issue`;
              if (!line.startsWith(commandPrefix)) return;

              const args = line.replace(commandPrefix, '').trim().split(/\s+/);
              for (const issue of args) {
                const childIssueNumber = parseIssueNumber(issue);
                const childIssueNodeId = await getIssueNodeId(owner, repo, childIssueNumber);
                await performSubIssueMutation(action, parentIssueNodeId, childIssueNodeId);
              }
            };

            try {
              const { owner, repo } = context.repo;
              const parentIssueNumber = context.payload.issue.number;
              const commentBody = context.payload.comment.body;

              // Get parent issue node ID
              const parentIssueNodeId = await getIssueNodeId(owner, repo, parentIssueNumber);

              // Process each line of the comment
              const lines = commentBody.split('\n');
              for (const line of lines) {
                await processSubIssueCommand(line, 'add', owner, repo, parentIssueNodeId);
                await processSubIssueCommand(line, 'remove', owner, repo, parentIssueNodeId);
              }
            } catch (error) {
              core.setOutput('error_message', error.message);
              core.setFailed(error.message);
            }

      - name: Post error comment if failure
        if: failure()
        uses: actions/github-script@v7
        with:
          error-message: ${{ steps.handle-commands.outputs.error_message }}
          script: |
            try {
              const commentUrl = context.payload.comment.html_url;
              const runId = context.runId;
              const { owner, repo } = context.repo;
              const errorMessage = context.inputs['error-message'];

              const errorBodyParts = [
                ':x: **GitHub Action Failed**',
                '',
                `The workflow encountered an error while processing [your comment](${commentUrl}) to manage sub-issues.`,
                '',
                `:point_right: [View the run](https://github.com/${owner}/${repo}/actions/runs/${runId})`,
                ''
              ];

              if (errorMessage && errorMessage !== '') {
                errorBodyParts.push(
                  '<details>',
                  '<summary>Error details</summary>',
                  '',
                  '```',
                  errorMessage,
                  '```',
                  '',
                  '</details>',
                  ''
                );
              }

              errorBodyParts.push('Please check the logs and try again, or open a bug report if the issue persists.');

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: context.payload.issue.number,
                body: errorBodyParts.join('\n')
              });
            } catch (error) {
              core.setFailed(`Failed to post error comment: ${error.message}`);
            }
