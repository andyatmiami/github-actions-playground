name: Sub-Issue Slash Command Handler

on:
  issue_comment:
    types: [created]

permissions:
  issues: write

env:
    GH_TOKEN: ${{ github.token }}

jobs:
  handle-sub-issue-command:
    if: github.event.issue.pull_request == null  # âœ… Only trigger on issues, not PRs
    runs-on: ubuntu-latest

    steps:
      - name: Write comment body to file
        run: |
          echo "${{ github.event.comment.body }}" > comment.txt

      - name: Parse and act on slash commands
        run: |
          set -euo pipefail

          gh_owner="${GITHUB_REPOSITORY%/*}"
          gh_repo_name="${GITHUB_REPOSITORY#*/}"

          parent_issue_number=${{ github.event.issue.number }}
          parent_issue_node_id=$(gh api graphql -f query="
            query {
              repository(owner: \"$gh_owner\", name: \"$gh_repo_name\") {
                issue(number: $parent_issue_number) {
                  id
                }
              }
            }" | jq -r '.data.repository.issue.id')

          echo "parent_issue_node_id: ${parent_issue_node_id}"

          while IFS= read -r line; do
            if echo "$line" | grep -qE '^/add-sub-issue'; then
              args=$(echo "$line" | sed -E 's|^/add-sub-issue *||')
              for issue in $args; do

                child_issue_number=$(echo "$issue" | sed 's/^#//')
                child_issue_node_id=$(gh api graphql -f query="
                  query {
                    repository(owner: \"$gh_owner\", name: \"$gh_repo_name\") {
                      issue(number: $child_issue_number) {
                        id
                      }
                    }
                  }" | jq -r '.data.repository.issue.id')
                echo "child_issue_node_id: ${child_issue_node_id}"

                set +e
                response=$(gh api graphql -f query="
                  mutation {
                    addSubIssue(input: {
                      issueId: \"$parent_issue_node_id\",
                      subIssueId: \"$child_issue_node_id\"
                    }) {
                      clientMutationId
                      issue {
                        id
                        title
                      }
                      subIssue {
                        id
                        title
                      }
                    }
                  }")
                  rc=$?
                  set -e

                  if ! [ "${rc}" = "0" ]; then
                    jq -r '[ .errors[]?.message ] | if length > 0 then join ("\n") else empty end' <<< "${response}" > error_summary.txt
                    exit "${rc}"
                  fi

              done
            elif echo "$line" | grep -qE '^/remove-sub-issue'; then
              args=$(echo "$line" | sed -E 's|^/remove-sub-issue *||')
              for issue in $args; do
                child_issue_number=$(echo "$issue" | sed 's/^#//')
                child_issue_node_id=$(gh api graphql -f query="
                  query {
                    repository(owner: \"$gh_owner\", name: \"$gh_repo_name\") {
                      issue(number: $child_issue_number) {
                        id
                      }
                    }
                  }" | jq -r '.data.repository.issue.id')
                echo "child_issue_node_id: ${child_issue_node_id}"

                gh api graphql -f query="
                  mutation {
                    removeSubIssue(input: {
                      issueId: \"$parent_issue_node_id\",
                      subIssueId: \"$child_issue_node_id\"
                    }) {
                      clientMutationId
                      issue {
                        id
                        title
                      }
                      subIssue {
                        id
                        title
                      }
                    }
                  }"
              done
            fi
          done < comment.txt

      - name: Post error comment if failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          COMMENT_URL: ${{ github.event.comment.html_url }}
        run: |
          error_summary=
          if [ -f "error_summary.txt"]; then
            error_summary=$(<error_summary.txt)
          fi

          {
            echo ":x: **GitHub Action Failed**"
            echo
            echo "The workflow encountered an error while processing [your comment](${COMMENT_URL}) to manage sub-issues."
            echo
            echo ":point_right: [View the run](https://github.com/${REPO}/actions/runs/${RUN_ID})"
            echo

            if [ -n "$error_summary" ]; then
              echo "<details>"
              echo "<summary>Expand to see error summary</summary>"
              echo
              echo '```bash'
              echo "${error_summary}"
              echo '```'
              echo "</details>"
              echo
            fi

            echo "Please check the logs and try again, or open a bug report if the issue persists."
          } > comment.md

          gh api "repos/${REPO}/issues/${ISSUE_NUMBER}/comments" \
            --method POST \
            --raw-field body="$(<comment.md)"
